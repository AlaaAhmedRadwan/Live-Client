// Generated by Dagger (https://dagger.dev).
package com.codesroots.live.di;

import com.codesroots.live.datalayer.APIServices;
import com.codesroots.live.repository.DataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideTasksBranchDataSourceFactory implements Factory<DataSource> {
  private final AppModule module;

  private final Provider<APIServices> apiServiceProvider;

  public AppModule_ProvideTasksBranchDataSourceFactory(AppModule module,
      Provider<APIServices> apiServiceProvider) {
    this.module = module;
    this.apiServiceProvider = apiServiceProvider;
  }

  @Override
  public DataSource get() {
    return provideTasksBranchDataSource(module, apiServiceProvider.get());
  }

  public static AppModule_ProvideTasksBranchDataSourceFactory create(AppModule module,
      Provider<APIServices> apiServiceProvider) {
    return new AppModule_ProvideTasksBranchDataSourceFactory(module, apiServiceProvider);
  }

  public static DataSource provideTasksBranchDataSource(AppModule instance,
      APIServices apiService) {
    return Preconditions.checkNotNullFromProvides(instance.provideTasksBranchDataSource(apiService));
  }
}
