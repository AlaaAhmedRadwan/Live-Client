// Generated by Dagger (https://dagger.dev).
package com.codesroots.live.di;

import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.codesroots.live.MainActivity;
import com.codesroots.live.datalayer.APIServices;
import com.codesroots.live.helper.PreferenceHelper;
import com.codesroots.live.helper.ViewModelFactory;
import com.codesroots.live.presentation.auth.AuthViewModel;
import com.codesroots.live.presentation.auth.AuthViewModel_Factory;
import com.codesroots.live.presentation.auth.LoginActivity;
import com.codesroots.live.presentation.auth.LoginActivity_MembersInjector;
import com.codesroots.live.presentation.current_item.CurrentItemFragment;
import com.codesroots.live.presentation.current_item.CurrentItemFragment_MembersInjector;
import com.codesroots.live.presentation.current_order_fragment.CurrentOrderFragment;
import com.codesroots.live.presentation.current_order_fragment.CurrentOrderFragment_MembersInjector;
import com.codesroots.live.presentation.current_order_fragment.mvi.CurrentOrderViewModel;
import com.codesroots.live.presentation.current_order_fragment.mvi.CurrentOrderViewModel_Factory;
import com.codesroots.live.presentation.deliveries_fragment.DeliveriesFragment;
import com.codesroots.live.presentation.deliveries_fragment.DeliveriesFragment_MembersInjector;
import com.codesroots.live.presentation.details_order_fragment.DetailsOrderFragment;
import com.codesroots.live.presentation.history_order_fragment.DailyOrdersFragment;
import com.codesroots.live.presentation.history_order_fragment.DailyOrdersFragment_MembersInjector;
import com.codesroots.live.presentation.history_order_fragment.HistoryOrderFragment;
import com.codesroots.live.presentation.history_order_fragment.HistoryOrderFragment_MembersInjector;
import com.codesroots.live.presentation.history_order_fragment.mvi.HistoryOrderViewmodel;
import com.codesroots.live.presentation.history_order_fragment.mvi.HistoryOrderViewmodel_Factory;
import com.codesroots.live.presentation.map_activity.MapActivity;
import com.codesroots.live.presentation.map_activity.MapActivity_MembersInjector;
import com.codesroots.live.presentation.new_order_bottomfragment.NewOrderFragment;
import com.codesroots.live.presentation.new_order_bottomfragment.NewOrderFragment_MembersInjector;
import com.codesroots.live.presentation.profile_fragment.ProfileFragment;
import com.codesroots.live.presentation.profile_fragment.ProfileFragment_MembersInjector;
import com.codesroots.live.presentation.profile_fragment.viewmodel.ProfileViewmodel;
import com.codesroots.live.presentation.profile_fragment.viewmodel.ProfileViewmodel_Factory;
import com.codesroots.live.presentation.splashScreen.SplashScreen;
import com.codesroots.live.presentation.splashScreen.SplashScreen_MembersInjector;
import com.codesroots.live.repository.DataRepo;
import com.codesroots.live.repository.DataRepo_Factory;
import com.codesroots.live.repository.DataSource;
import com.codesroots.live.repository.RemoteDataSource;
import com.codesroots.live.repository.RemoteDataSource_Factory;
import com.github.nkzawa.socketio.client.Socket;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final AppModule appModule;

  private final Context applicationContext;

  private Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuildersModule_ContributeMapActivity.MapActivitySubcomponent.Factory> mapActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuildersModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory> loginActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuildersModule_ContributeSplashScreen.SplashScreenSubcomponent.Factory> splashScreenSubcomponentFactoryProvider;

  private Provider<GsonConverterFactory> provideConverterFactoryProvider;

  private Provider<Context> applicationContextProvider;

  private Provider<OkHttpClient> provideHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<APIServices> ApiServicesProvider;

  private Provider<DataSource> provideTasksBranchDataSourceProvider;

  private Provider<DataRepo> dataRepoProvider;

  private Provider<RemoteDataSource> remoteDataSourceProvider;

  private Provider<CurrentOrderViewModel> currentOrderViewModelProvider;

  private Provider<HistoryOrderViewmodel> historyOrderViewmodelProvider;

  private Provider<PreferenceHelper> providePreferenceHelperProvider;

  private Provider<AuthViewModel> authViewModelProvider;

  private Provider<ProfileViewmodel> profileViewmodelProvider;

  private Provider<Socket> provideSocketProvider;

  private DaggerAppComponent(APIModule aPIModuleParam, AppModule appModuleParam,
      SocketModule socketModuleParam, Context applicationContextParam) {
    this.appModule = appModuleParam;
    this.applicationContext = applicationContextParam;
    initialize(aPIModuleParam, appModuleParam, socketModuleParam, applicationContextParam);
  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(4).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(MapActivity.class, (Provider) mapActivitySubcomponentFactoryProvider).put(LoginActivity.class, (Provider) loginActivitySubcomponentFactoryProvider).put(SplashScreen.class, (Provider) splashScreenSubcomponentFactoryProvider).build();
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private PreferenceHelper preferenceHelper() {
    return AppModule_ProvidePreferenceHelperFactory.providePreferenceHelper(appModule, applicationContext);
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
      ) {
    return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(4).put(CurrentOrderViewModel.class, (Provider) currentOrderViewModelProvider).put(HistoryOrderViewmodel.class, (Provider) historyOrderViewmodelProvider).put(AuthViewModel.class, (Provider) authViewModelProvider).put(ProfileViewmodel.class, (Provider) profileViewmodelProvider).build();
  }

  private ViewModelFactory viewModelFactory() {
    return new ViewModelFactory(mapOfClassOfAndProviderOfViewModel());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final APIModule aPIModuleParam, final AppModule appModuleParam,
      final SocketModule socketModuleParam, final Context applicationContextParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();
      }
    };
    this.mapActivitySubcomponentFactoryProvider = new Provider<ActivityBuildersModule_ContributeMapActivity.MapActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuildersModule_ContributeMapActivity.MapActivitySubcomponent.Factory get() {
        return new MapActivitySubcomponentFactory();
      }
    };
    this.loginActivitySubcomponentFactoryProvider = new Provider<ActivityBuildersModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuildersModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory get(
          ) {
        return new LoginActivitySubcomponentFactory();
      }
    };
    this.splashScreenSubcomponentFactoryProvider = new Provider<ActivityBuildersModule_ContributeSplashScreen.SplashScreenSubcomponent.Factory>() {
      @Override
      public ActivityBuildersModule_ContributeSplashScreen.SplashScreenSubcomponent.Factory get() {
        return new SplashScreenSubcomponentFactory();
      }
    };
    this.provideConverterFactoryProvider = DoubleCheck.provider(APIModule_ProvideConverterFactoryFactory.create(aPIModuleParam));
    this.applicationContextProvider = InstanceFactory.create(applicationContextParam);
    this.provideHttpClientProvider = DoubleCheck.provider(APIModule_ProvideHttpClientFactory.create(aPIModuleParam, applicationContextProvider));
    this.provideRetrofitProvider = DoubleCheck.provider(APIModule_ProvideRetrofitFactory.create(aPIModuleParam, provideConverterFactoryProvider, provideHttpClientProvider));
    this.ApiServicesProvider = DoubleCheck.provider(APIModule_ApiServicesFactory.create(aPIModuleParam, provideRetrofitProvider));
    this.provideTasksBranchDataSourceProvider = DoubleCheck.provider(AppModule_ProvideTasksBranchDataSourceFactory.create(appModuleParam, ApiServicesProvider));
    this.dataRepoProvider = DataRepo_Factory.create(provideTasksBranchDataSourceProvider, DispatcherModule_ProvidesIoDispatcherFactory.create());
    this.remoteDataSourceProvider = RemoteDataSource_Factory.create(ApiServicesProvider);
    this.currentOrderViewModelProvider = CurrentOrderViewModel_Factory.create(dataRepoProvider, remoteDataSourceProvider);
    this.historyOrderViewmodelProvider = HistoryOrderViewmodel_Factory.create(dataRepoProvider);
    this.providePreferenceHelperProvider = AppModule_ProvidePreferenceHelperFactory.create(appModuleParam, applicationContextProvider);
    this.authViewModelProvider = AuthViewModel_Factory.create(remoteDataSourceProvider, providePreferenceHelperProvider);
    this.profileViewmodelProvider = ProfileViewmodel_Factory.create(dataRepoProvider, remoteDataSourceProvider);
    this.provideSocketProvider = DoubleCheck.provider(SocketModule_ProvideSocketFactory.create(socketModuleParam));
  }

  @Override
  public void inject(DaggerApplication arg0) {
    injectDaggerApplication(arg0);
  }

  @Override
  public void inject(SplashScreen app) {
    injectSplashScreen(app);
  }

  @Override
  public void inject(LoginActivity app) {
    injectLoginActivity(app);
  }

  @Override
  public void inject(ProfileFragment app) {
    injectProfileFragment(app);
  }

  @Override
  public void inject(MapActivity app) {
    injectMapActivity(app);
  }

  @Override
  public void inject(MainActivity app) {
  }

  @Override
  public void inject(NewOrderFragment app) {
    injectNewOrderFragment(app);
  }

  @Override
  public void inject(HistoryOrderFragment app) {
    injectHistoryOrderFragment(app);
  }

  @Override
  public void inject(CurrentOrderFragment app) {
    injectCurrentOrderFragment(app);
  }

  @Override
  public void inject(DetailsOrderFragment app) {
  }

  @Override
  public void inject(CurrentItemFragment app) {
    injectCurrentItemFragment(app);
  }

  @Override
  public void inject(DailyOrdersFragment app) {
    injectDailyOrdersFragment(app);
  }

  @Override
  public void inject(DeliveriesFragment app) {
    injectDeliveriesFragment(app);
  }

  @CanIgnoreReturnValue
  private DaggerApplication injectDaggerApplication(DaggerApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  @CanIgnoreReturnValue
  private SplashScreen injectSplashScreen(SplashScreen instance) {
    SplashScreen_MembersInjector.injectPref(instance, preferenceHelper());
    SplashScreen_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  @CanIgnoreReturnValue
  private LoginActivity injectLoginActivity(LoginActivity instance) {
    LoginActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactory());
    LoginActivity_MembersInjector.injectSocket(instance, provideSocketProvider.get());
    LoginActivity_MembersInjector.injectPref(instance, preferenceHelper());
    return instance;
  }

  @CanIgnoreReturnValue
  private ProfileFragment injectProfileFragment(ProfileFragment instance) {
    ProfileFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactory());
    ProfileFragment_MembersInjector.injectPref(instance, preferenceHelper());
    return instance;
  }

  @CanIgnoreReturnValue
  private MapActivity injectMapActivity(MapActivity instance) {
    MapActivity_MembersInjector.injectPref(instance, preferenceHelper());
    MapActivity_MembersInjector.injectSocket(instance, provideSocketProvider.get());
    MapActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactory());
    MapActivity_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  @CanIgnoreReturnValue
  private NewOrderFragment injectNewOrderFragment(NewOrderFragment instance) {
    NewOrderFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactory());
    NewOrderFragment_MembersInjector.injectPref(instance, preferenceHelper());
    return instance;
  }

  @CanIgnoreReturnValue
  private HistoryOrderFragment injectHistoryOrderFragment(HistoryOrderFragment instance) {
    HistoryOrderFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactory());
    return instance;
  }

  @CanIgnoreReturnValue
  private CurrentOrderFragment injectCurrentOrderFragment(CurrentOrderFragment instance) {
    CurrentOrderFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactory());
    return instance;
  }

  @CanIgnoreReturnValue
  private CurrentItemFragment injectCurrentItemFragment(CurrentItemFragment instance) {
    CurrentItemFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactory());
    CurrentItemFragment_MembersInjector.injectPref(instance, preferenceHelper());
    return instance;
  }

  @CanIgnoreReturnValue
  private DailyOrdersFragment injectDailyOrdersFragment(DailyOrdersFragment instance) {
    DailyOrdersFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactory());
    return instance;
  }

  @CanIgnoreReturnValue
  private DeliveriesFragment injectDeliveriesFragment(DeliveriesFragment instance) {
    DeliveriesFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactory());
    DeliveriesFragment_MembersInjector.injectPref(instance, preferenceHelper());
    return instance;
  }

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(Context applicationContext) {
      Preconditions.checkNotNull(applicationContext);
      return new DaggerAppComponent(new APIModule(), new AppModule(), new SocketModule(), applicationContext);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivity arg0) {

    }

    @Override
    public void inject(MainActivity arg0) {
    }
  }

  private final class MapActivitySubcomponentFactory implements ActivityBuildersModule_ContributeMapActivity.MapActivitySubcomponent.Factory {
    @Override
    public ActivityBuildersModule_ContributeMapActivity.MapActivitySubcomponent create(
        MapActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MapActivitySubcomponentImpl(arg0);
    }
  }

  private final class MapActivitySubcomponentImpl implements ActivityBuildersModule_ContributeMapActivity.MapActivitySubcomponent {
    private MapActivitySubcomponentImpl(MapActivity arg0) {

    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(4).put(CurrentOrderViewModel.class, (Provider) DaggerAppComponent.this.currentOrderViewModelProvider).put(HistoryOrderViewmodel.class, (Provider) DaggerAppComponent.this.historyOrderViewmodelProvider).put(AuthViewModel.class, (Provider) DaggerAppComponent.this.authViewModelProvider).put(ProfileViewmodel.class, (Provider) DaggerAppComponent.this.profileViewmodelProvider).build();
    }

    private ViewModelFactory viewModelFactory() {
      return new ViewModelFactory(mapOfClassOfAndProviderOfViewModel());
    }

    @Override
    public void inject(MapActivity arg0) {
      injectMapActivity(arg0);
    }

    @CanIgnoreReturnValue
    private MapActivity injectMapActivity(MapActivity instance) {
      MapActivity_MembersInjector.injectPref(instance, DaggerAppComponent.this.preferenceHelper());
      MapActivity_MembersInjector.injectSocket(instance, DaggerAppComponent.this.provideSocketProvider.get());
      MapActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactory());
      MapActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }

  private final class LoginActivitySubcomponentFactory implements ActivityBuildersModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory {
    @Override
    public ActivityBuildersModule_ContributeLoginActivity.LoginActivitySubcomponent create(
        LoginActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginActivitySubcomponentImpl(arg0);
    }
  }

  private final class LoginActivitySubcomponentImpl implements ActivityBuildersModule_ContributeLoginActivity.LoginActivitySubcomponent {
    private LoginActivitySubcomponentImpl(LoginActivity arg0) {

    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
        ) {
      return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(4).put(CurrentOrderViewModel.class, (Provider) DaggerAppComponent.this.currentOrderViewModelProvider).put(HistoryOrderViewmodel.class, (Provider) DaggerAppComponent.this.historyOrderViewmodelProvider).put(AuthViewModel.class, (Provider) DaggerAppComponent.this.authViewModelProvider).put(ProfileViewmodel.class, (Provider) DaggerAppComponent.this.profileViewmodelProvider).build();
    }

    private ViewModelFactory viewModelFactory() {
      return new ViewModelFactory(mapOfClassOfAndProviderOfViewModel());
    }

    @Override
    public void inject(LoginActivity arg0) {
      injectLoginActivity(arg0);
    }

    @CanIgnoreReturnValue
    private LoginActivity injectLoginActivity(LoginActivity instance) {
      LoginActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactory());
      LoginActivity_MembersInjector.injectSocket(instance, DaggerAppComponent.this.provideSocketProvider.get());
      LoginActivity_MembersInjector.injectPref(instance, DaggerAppComponent.this.preferenceHelper());
      return instance;
    }
  }

  private final class SplashScreenSubcomponentFactory implements ActivityBuildersModule_ContributeSplashScreen.SplashScreenSubcomponent.Factory {
    @Override
    public ActivityBuildersModule_ContributeSplashScreen.SplashScreenSubcomponent create(
        SplashScreen arg0) {
      Preconditions.checkNotNull(arg0);
      return new SplashScreenSubcomponentImpl(arg0);
    }
  }

  private final class SplashScreenSubcomponentImpl implements ActivityBuildersModule_ContributeSplashScreen.SplashScreenSubcomponent {
    private SplashScreenSubcomponentImpl(SplashScreen arg0) {

    }

    @Override
    public void inject(SplashScreen arg0) {
      injectSplashScreen(arg0);
    }

    @CanIgnoreReturnValue
    private SplashScreen injectSplashScreen(SplashScreen instance) {
      SplashScreen_MembersInjector.injectPref(instance, DaggerAppComponent.this.preferenceHelper());
      SplashScreen_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      return instance;
    }
  }
}
