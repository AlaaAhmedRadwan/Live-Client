// Generated by Dagger (https://dagger.dev).
package com.codesroots.live.presentation.auth;

import com.codesroots.live.helper.PreferenceHelper;
import com.codesroots.live.repository.RemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AuthViewModel_Factory implements Factory<AuthViewModel> {
  private final Provider<RemoteDataSource> datasourcesProvider;

  private final Provider<PreferenceHelper> prefProvider;

  public AuthViewModel_Factory(Provider<RemoteDataSource> datasourcesProvider,
      Provider<PreferenceHelper> prefProvider) {
    this.datasourcesProvider = datasourcesProvider;
    this.prefProvider = prefProvider;
  }

  @Override
  public AuthViewModel get() {
    AuthViewModel instance = newInstance(datasourcesProvider.get());
    AuthViewModel_MembersInjector.injectPref(instance, prefProvider.get());
    return instance;
  }

  public static AuthViewModel_Factory create(Provider<RemoteDataSource> datasourcesProvider,
      Provider<PreferenceHelper> prefProvider) {
    return new AuthViewModel_Factory(datasourcesProvider, prefProvider);
  }

  public static AuthViewModel newInstance(RemoteDataSource Datasources) {
    return new AuthViewModel(Datasources);
  }
}
