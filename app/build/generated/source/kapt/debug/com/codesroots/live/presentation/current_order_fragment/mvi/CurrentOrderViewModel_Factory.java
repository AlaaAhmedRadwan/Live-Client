// Generated by Dagger (https://dagger.dev).
package com.codesroots.live.presentation.current_order_fragment.mvi;

import com.codesroots.live.repository.DataRepo;
import com.codesroots.live.repository.RemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CurrentOrderViewModel_Factory implements Factory<CurrentOrderViewModel> {
  private final Provider<DataRepo> dateRepoCompnayProvider;

  private final Provider<RemoteDataSource> datasourcesProvider;

  public CurrentOrderViewModel_Factory(Provider<DataRepo> dateRepoCompnayProvider,
      Provider<RemoteDataSource> datasourcesProvider) {
    this.dateRepoCompnayProvider = dateRepoCompnayProvider;
    this.datasourcesProvider = datasourcesProvider;
  }

  @Override
  public CurrentOrderViewModel get() {
    return newInstance(dateRepoCompnayProvider.get(), datasourcesProvider.get());
  }

  public static CurrentOrderViewModel_Factory create(Provider<DataRepo> dateRepoCompnayProvider,
      Provider<RemoteDataSource> datasourcesProvider) {
    return new CurrentOrderViewModel_Factory(dateRepoCompnayProvider, datasourcesProvider);
  }

  public static CurrentOrderViewModel newInstance(DataRepo DateRepoCompnay,
      RemoteDataSource Datasources) {
    return new CurrentOrderViewModel(DateRepoCompnay, Datasources);
  }
}
